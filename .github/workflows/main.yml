name: RDP with GPU

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Check GPU Availability
        run: |
          Write-Host "=== GPU Information ==="
          Get-CimInstance -ClassName Win32_VideoController | Format-List Name, DriverVersion, AdapterRAM
          Write-Host "======================="

      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                           -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "SecurityLayer" -Value 0 -Force

          # Configure RDP for better GPU performance
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "MaxMonitors" -Value 4
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "MaxXResolution" -Value 4096
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "MaxYResolution" -Value 2160

          # Configure firewall
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Optimize GPU for RDP
        run: |
          # Enable hardware acceleration for RDP
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' `
                           -Name "bEnumerateHWBeforeSW" -Value 1 -ErrorAction SilentlyContinue
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' `
                           -Name "AVCHardwareEncodePreferred" -Value 1 -ErrorAction SilentlyContinue
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' `
                           -Name "AVC444ModePreferred" -Value 1 -ErrorAction SilentlyContinue

      - name: Create RDP User with Secure Password
        run: |
          function Generate-SecurePassword {
              $charSet = @{
                  Upper   = [char[]](65..90)      # A-Z
                  Lower   = [char[]](97..122)     # a-z
                  Number  = [char[]](48..57)      # 0-9
                  Special = ([char[]](33..47) + [char[]](58..64) +
                             [char[]](91..96) + [char[]](123..126))
              }
              $rawPassword = @()
              $rawPassword += $charSet.Upper | Get-Random -Count 4
              $rawPassword += $charSet.Lower | Get-Random -Count 4
              $rawPassword += $charSet.Number | Get-Random -Count 4
              $rawPassword += $charSet.Special | Get-Random -Count 4
              return -join ($rawPassword | Sort-Object { Get-Random })
          }

          $password = Generate-SecurePassword
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          
          # Create user
          New-LocalUser -Name "RDPUser" -Password $securePass -AccountNeverExpires -FullName "RDP User"
          Add-LocalGroupMember -Group "Administrators" -Member "RDPUser"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDPUser"
          Add-LocalGroupMember -Group "Performance Log Users" -Member "RDPUser"
          
          # Store credentials securely
          echo "RDP_USER=RDPUser" >> $env:GITHUB_ENV
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          # Generate unique hostname
          $hostname = "gh-gpu-runner-$env:GITHUB_RUN_ID"
          
          # Start Tailscale with your fixed auth key
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey="tskey-auth-kUq9WjtGoK11CNTRL-wSh1PAHzkbfwmphDsK6sbfmaPzcco5kUc" --hostname=$hostname --accept-routes
          
          # Get Tailscale IP
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 15) {
              Start-Sleep -Seconds 3
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned"
              exit 1
          }
          
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          echo "RDP_HOSTNAME=$hostname" >> $env:GITHUB_ENV

      - name: Install GPU Drivers (if needed)
        run: |
          # Check if basic display driver is active (indicating missing GPU drivers)
          $gpuStatus = Get-CimInstance -ClassName Win32_VideoController | Where-Object { $_.Name -like "*Basic Display*" }
          
          if ($gpuStatus) {
              Write-Host "Basic display driver detected. Installing NVIDIA GPU drivers..."
              
              # Download and install NVIDIA drivers
              $driverUrl = "https://us.download.nvidia.com/Windows/535.98/535.98-desktop-win10-win11-64bit-international-whql.exe"
              $driverPath = "$env:TEMP\nvidia_driver.exe"
              
              try {
                  Invoke-WebRequest -Uri $driverUrl -OutFile $driverPath
                  Start-Process -FilePath $driverPath -ArgumentList "-s", "-noreboot" -Wait -NoNewWindow
                  Write-Host "GPU drivers installed successfully"
              }
              catch {
                  Write-Warning "Failed to install GPU drivers: $_"
              }
              finally {
                  if (Test-Path $driverPath) { Remove-Item $driverPath -Force }
              }
          } else {
              Write-Host "GPU drivers already installed"
          }

      - name: Configure Display and Graphics
        run: |
          # Set high performance power plan
          powercfg /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
          
          # Enable hardware accelerated GPU scheduling
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\GraphicsDrivers" `
                           -Name "HwSchMode" -Value 2 -ErrorAction SilentlyContinue

      - name: Verify RDP and GPU Accessibility
        run: |
          Write-Host "=== Connection Details ==="
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          Write-Host "Hostname: $env:RDP_HOSTNAME"
          Write-Host "Username: $env:RDP_USER"
          
          # Test RDP connectivity
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -WarningAction SilentlyContinue
          if ($testResult.TcpTestSucceeded) {
              Write-Host "‚úì RDP port 3389 is accessible"
          } else {
              Write-Error "‚úó RDP port 3389 is not accessible"
              exit 1
          }
          
          # Display final GPU status
          Write-Host "`n=== Final GPU Status ==="
          $gpus = Get-CimInstance -ClassName Win32_VideoController
          foreach ($gpu in $gpus) {
              Write-Host "GPU: $($gpu.Name)"
              Write-Host "Driver: $($gpu.DriverVersion)"
              Write-Host "VRAM: $([math]::Round($gpu.AdapterRAM/1GB, 2)) GB"
              Write-Host "Status: $($gpu.Status)"
              Write-Host "---"
          }

      - name: Maintain RDP Connection
        run: |
          Write-Host ""
          Write-Host "================================================"
          Write-Host "üöÄ RDP WITH GPU ACCESS READY"
          Write-Host "================================================"
          Write-Host "üìç Address: $env:TAILSCALE_IP"
          Write-Host "üë§ Username: $env:RDP_USER" 
          Write-Host "üîê Password: $env:RDP_PASSWORD"
          Write-Host "üíª Hostname: $env:RDP_HOSTNAME"
          Write-Host ""
          Write-Host "üí° Tips:"
          Write-Host "‚Ä¢ Use Microsoft Remote Desktop application"
          Write-Host "‚Ä¢ Enable all experience settings for best performance"
          Write-Host "‚Ä¢ Set color depth to 32-bit for best quality"
          Write-Host "‚Ä¢ GPU acceleration should be available automatically"
          Write-Host "================================================"
          Write-Host ""
          
          # Keep-alive loop with status updates
          $startTime = Get-Date
          while ($true) {
              $uptime = (Get-Date) - $startTime
              Write-Host "[$(Get-Date -Format 'HH:mm:ss')] RDP Active - Uptime: $($uptime.ToString('hh\:mm\:ss')) - GPU available for acceleration"
              
              # Periodically verify Tailscale connection
              $tsStatus = & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json | ConvertFrom-Json
              if ($tsStatus.BackendState -eq "Running") {
                  Write-Host "   ‚úì Tailscale connected: $($tsStatus.Self.TailscaleIPs[0])"
              } else {
                  Write-Warning "   ‚ö† Tailscale connection issue"
              }
              
              Start-Sleep -Seconds 300
          }
