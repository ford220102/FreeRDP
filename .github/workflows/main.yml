name: RDP with GPU

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Check GPU Availability
        run: |
          Write-Host "=== GPU Information ==="
          Get-CimInstance -ClassName Win32_VideoController | Format-List Name, DriverVersion, AdapterRAM
          Write-Host "======================="

      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                           -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "SecurityLayer" -Value 0 -Force

          # Configure RDP for better GPU performance
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "MaxMonitors" -Value 4
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "MaxXResolution" -Value 4096
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "MaxYResolution" -Value 2160

          # Configure firewall
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        run: |
          function Generate-SecurePassword {
              $charSet = @{
                  Upper   = [char[]](65..90)      # A-Z
                  Lower   = [char[]](97..122)     # a-z
                  Number  = [char[]](48..57)      # 0-9
                  Special = ([char[]](33..47) + [char[]](58..64) +
                             [char[]](91..96) + [char[]](123..126))
              }
              $rawPassword = @()
              $rawPassword += $charSet.Upper | Get-Random -Count 4
              $rawPassword += $charSet.Lower | Get-Random -Count 4
              $rawPassword += $charSet.Number | Get-Random -Count 4
              $rawPassword += $charSet.Special | Get-Random -Count 4
              return -join ($rawPassword | Sort-Object { Get-Random })
          }

          $password = Generate-SecurePassword
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          
          # Create user
          New-LocalUser -Name "RDPUser" -Password $securePass -AccountNeverExpires -FullName "RDP User"
          Add-LocalGroupMember -Group "Administrators" -Member "RDPUser"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDPUser"
          
          # Store credentials
          echo "RDP_USER=RDPUser" >> $env:GITHUB_ENV
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Write-Host "Downloading Tailscale..."
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Write-Host "Installing Tailscale..."
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force
          Write-Host "Tailscale installed successfully"

      - name: Debug Tailscale Installation
        run: |
          Write-Host "=== Tailscale Debug Info ==="
          # Check if Tailscale is installed
          $tsPath = "$env:ProgramFiles\Tailscale\tailscale.exe"
          if (Test-Path $tsPath) {
              Write-Host "✓ Tailscale executable found"
              & $tsPath version
          } else {
              Write-Error "✗ Tailscale executable not found"
          }
          
          # Check service status
          $service = Get-Service -Name Tailscale -ErrorAction SilentlyContinue
          if ($service) {
              Write-Host "Tailscale service status: $($service.Status)"
          } else {
              Write-Host "Tailscale service not found"
          }
          Write-Host "============================"

      - name: Establish Tailscale Connection
        run: |
          $hostname = "gh-runner-$env:GITHUB_RUN_ID"
          $authKey = "tskey-auth-kUq9WjtGoK11CNTRL-wSh1PAHzkbfwmphDsK6sbfmaPzcco5kUc"
          
          Write-Host "Using auth key: $($authKey.Substring(0, 20))..." # Log partial key for debugging
          Write-Host "Hostname: $hostname"
          
          # Start Tailscale with detailed logging
          Write-Host "Starting Tailscale..."
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$authKey --hostname=$hostname --accept-routes --reset
          
          # Wait and check status with more details
          Write-Host "Checking Tailscale status..."
          $maxRetries = 20
          $retryCount = 0
          
          while ($retryCount -lt $maxRetries) {
              Write-Host "Attempt $($retryCount + 1)/$maxRetries..."
              
              # Get detailed status
              & "$env:ProgramFiles\Tailscale\tailscale.exe" status --verbose
              
              # Try to get IP
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>$null
              $tsState = & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json 2>$null | ConvertFrom-Json 2>$null
              
              if ($tsIP -and $tsState.BackendState -eq "Running") {
                  Write-Host "✓ Tailscale connected successfully!"
                  Write-Host "Assigned IP: $tsIP"
                  echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
                  echo "RDP_HOSTNAME=$hostname" >> $env:GITHUB_ENV
                  break
              }
              
              if ($tsState) {
                  Write-Host "Current state: $($tsState.BackendState)"
                  Write-Host "Login URL: $($tsState.Self.ExitNode)"
              }
              
              $retryCount++
              if ($retryCount -eq 10) {
                  Write-Host "Trying reset after 10 attempts..."
                  & "$env:ProgramFiles\Tailscale\tailscale.exe" up --reset
              }
              Start-Sleep -Seconds 5
          }
          
          if (-not $env:TAILSCALE_IP) {
              Write-Host "=== TAILSCALE TROUBLESHOOTING ==="
              Write-Host "1. Check if auth key is valid and not expired"
              Write-Host "2. Verify key has proper permissions"
              Write-Host "3. Try generating a new auth key in Tailscale admin"
              Write-Host "4. Check Tailscale logs: Get-EventLog -LogName Application -Source Tailscale | Select-Object -Last 10"
              
              # Try alternative connection method
              Write-Host "Attempting alternative connection method..."
              & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$authKey --hostname=$hostname --accept-routes --force-reauth
              Start-Sleep -Seconds 10
              
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>$null
              if ($tsIP) {
                  Write-Host "✓ Connected after force reauth!"
                  echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
                  echo "RDP_HOSTNAME=$hostname" >> $env:GITHUB_ENV
              } else {
                  Write-Error "Failed to establish Tailscale connection after $maxRetries attempts"
                  Write-Host "Proceeding with local RDP setup only..."
                  echo "TAILSCALE_IP=LOCAL_ONLY" >> $env:GITHUB_ENV
              }
          }

      - name: Configure Network for RDP (Fallback)
        if: env.TAILSCALE_IP == 'LOCAL_ONLY'
        run: |
          Write-Host "Setting up local RDP access..."
          # Additional firewall rules for local network
          netsh advfirewall firewall add rule name="RDP-Local" dir=in action=allow protocol=TCP localport=3389
          
          # Get local IP
          $localIP = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object { $_.InterfaceAlias -eq "Ethernet" -or $_.InterfaceAlias -eq "Wi-Fi" } | Select-Object -First 1).IPAddress
          if (-not $localIP) {
              $localIP = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object { $_.IPAddress -ne "127.0.0.1" } | Select-Object -First 1).IPAddress
          }
          
          echo "LOCAL_IP=$localIP" >> $env:GITHUB_ENV
          Write-Host "Local IP: $localIP"

      - name: Verify RDP Accessibility
        run: |
          if ($env:TAILSCALE_IP -and $env:TAILSCALE_IP -ne 'LOCAL_ONLY') {
              $testIP = $env:TAILSCALE_IP
              Write-Host "Testing Tailscale RDP connection: $testIP"
          } else {
              $testIP = $env:LOCAL_IP
              Write-Host "Testing Local RDP connection: $testIP"
          }
          
          # Test RDP port
          $testResult = Test-NetConnection -ComputerName $testIP -Port 3389 -WarningAction SilentlyContinue -InformationLevel Quiet
          if ($testResult) {
              Write-Host "✓ RDP port 3389 is accessible on $testIP"
          } else {
              Write-Host "⚠ RDP port test failed on $testIP, but continuing..."
          }

      - name: Display Connection Information
        run: |
          Write-Host ""
          Write-Host "================================================"
          Write-Host "🚀 RDP ACCESS READY"
          Write-Host "================================================"
          
          if ($env:TAILSCALE_IP -and $env:TAILSCALE_IP -ne 'LOCAL_ONLY') {
              Write-Host "📍 Tailscale Address: $env:TAILSCALE_IP"
          }
          if ($env:LOCAL_IP) {
              Write-Host "📍 Local Address: $env:LOCAL_IP"
          }
          
          Write-Host "👤 Username: $env:RDP_USER" 
          Write-Host "🔐 Password: $env:RDP_PASSWORD"
          Write-Host "💻 Hostname: $env:COMPUTERNAME"
          Write-Host ""
          Write-Host "💡 Connection Methods:"
          if ($env:TAILSCALE_IP) {
              Write-Host "• Tailscale VPN: $env:TAILSCALE_IP"
          }
          if ($env:LOCAL_IP) {
              Write-Host "• Local Network: $env:LOCAL_IP"
          }
          Write-Host "================================================"

      - name: Maintain RDP Connection
        run: |
          $startTime = Get-Date
          while ($true) {
              $uptime = (Get-Date) - $startTime
              Write-Host "[$(Get-Date -Format 'HH:mm:ss')] RDP Active - Uptime: $($uptime.ToString('hh\:mm\:ss'))"
              
              # Check Tailscale status if applicable
              if ($env:TAILSCALE_IP -and $env:TAILSCALE_IP -ne 'LOCAL_ONLY') {
                  $tsStatus = & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json 2>$null | ConvertFrom-Json 2>$null
                  if ($tsStatus -and $tsStatus.BackendState -eq "Running") {
                      Write-Host "   ✓ Tailscale: $($tsStatus.Self.TailscaleIPs[0])"
                  } else {
                      Write-Host "   ⚠ Tailscale: Not connected"
                  }
              }
              
              Start-Sleep -Seconds 300
          }
